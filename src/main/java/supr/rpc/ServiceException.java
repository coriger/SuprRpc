/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package supr.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-08")
public class ServiceException extends TException implements org.apache.thrift.TBase<ServiceException, ServiceException._Fields>, java.io.Serializable, Cloneable, Comparable<ServiceException> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceException");

  private static final org.apache.thrift.protocol.TField EXCEPTION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EXCEPTION_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionMsg", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ServiceExceptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ServiceExceptionTupleSchemeFactory());
  }

  public String exceptionCode; // required
  public String exceptionMsg; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXCEPTION_CODE((short)1, "exceptionCode"),
    EXCEPTION_MSG((short)2, "exceptionMsg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXCEPTION_CODE
          return EXCEPTION_CODE;
        case 2: // EXCEPTION_MSG
          return EXCEPTION_MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXCEPTION_CODE, new org.apache.thrift.meta_data.FieldMetaData("exceptionCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCEPTION_MSG, new org.apache.thrift.meta_data.FieldMetaData("exceptionMsg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServiceException.class, metaDataMap);
  }

  public ServiceException() {
  }

  public ServiceException(
    String exceptionCode,
    String exceptionMsg)
  {
    this();
    this.exceptionCode = exceptionCode;
    this.exceptionMsg = exceptionMsg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServiceException(ServiceException other) {
    if (other.isSetExceptionCode()) {
      this.exceptionCode = other.exceptionCode;
    }
    if (other.isSetExceptionMsg()) {
      this.exceptionMsg = other.exceptionMsg;
    }
  }

  public ServiceException deepCopy() {
    return new ServiceException(this);
  }

  @Override
  public void clear() {
    this.exceptionCode = null;
    this.exceptionMsg = null;
  }

  public String getExceptionCode() {
    return this.exceptionCode;
  }

  public ServiceException setExceptionCode(String exceptionCode) {
    this.exceptionCode = exceptionCode;
    return this;
  }

  public void unsetExceptionCode() {
    this.exceptionCode = null;
  }

  /** Returns true if field exceptionCode is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptionCode() {
    return this.exceptionCode != null;
  }

  public void setExceptionCodeIsSet(boolean value) {
    if (!value) {
      this.exceptionCode = null;
    }
  }

  public String getExceptionMsg() {
    return this.exceptionMsg;
  }

  public ServiceException setExceptionMsg(String exceptionMsg) {
    this.exceptionMsg = exceptionMsg;
    return this;
  }

  public void unsetExceptionMsg() {
    this.exceptionMsg = null;
  }

  /** Returns true if field exceptionMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptionMsg() {
    return this.exceptionMsg != null;
  }

  public void setExceptionMsgIsSet(boolean value) {
    if (!value) {
      this.exceptionMsg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXCEPTION_CODE:
      if (value == null) {
        unsetExceptionCode();
      } else {
        setExceptionCode((String)value);
      }
      break;

    case EXCEPTION_MSG:
      if (value == null) {
        unsetExceptionMsg();
      } else {
        setExceptionMsg((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXCEPTION_CODE:
      return getExceptionCode();

    case EXCEPTION_MSG:
      return getExceptionMsg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXCEPTION_CODE:
      return isSetExceptionCode();
    case EXCEPTION_MSG:
      return isSetExceptionMsg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServiceException)
      return this.equals((ServiceException)that);
    return false;
  }

  public boolean equals(ServiceException that) {
    if (that == null)
      return false;

    boolean this_present_exceptionCode = true && this.isSetExceptionCode();
    boolean that_present_exceptionCode = true && that.isSetExceptionCode();
    if (this_present_exceptionCode || that_present_exceptionCode) {
      if (!(this_present_exceptionCode && that_present_exceptionCode))
        return false;
      if (!this.exceptionCode.equals(that.exceptionCode))
        return false;
    }

    boolean this_present_exceptionMsg = true && this.isSetExceptionMsg();
    boolean that_present_exceptionMsg = true && that.isSetExceptionMsg();
    if (this_present_exceptionMsg || that_present_exceptionMsg) {
      if (!(this_present_exceptionMsg && that_present_exceptionMsg))
        return false;
      if (!this.exceptionMsg.equals(that.exceptionMsg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_exceptionCode = true && (isSetExceptionCode());
    list.add(present_exceptionCode);
    if (present_exceptionCode)
      list.add(exceptionCode);

    boolean present_exceptionMsg = true && (isSetExceptionMsg());
    list.add(present_exceptionMsg);
    if (present_exceptionMsg)
      list.add(exceptionMsg);

    return list.hashCode();
  }

  @Override
  public int compareTo(ServiceException other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExceptionCode()).compareTo(other.isSetExceptionCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptionCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionCode, other.exceptionCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExceptionMsg()).compareTo(other.isSetExceptionMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptionMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionMsg, other.exceptionMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServiceException(");
    boolean first = true;

    sb.append("exceptionCode:");
    if (this.exceptionCode == null) {
      sb.append("null");
    } else {
      sb.append(this.exceptionCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exceptionMsg:");
    if (this.exceptionMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.exceptionMsg);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (exceptionCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'exceptionCode' was not present! Struct: " + toString());
    }
    if (exceptionMsg == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'exceptionMsg' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServiceExceptionStandardSchemeFactory implements SchemeFactory {
    public ServiceExceptionStandardScheme getScheme() {
      return new ServiceExceptionStandardScheme();
    }
  }

  private static class ServiceExceptionStandardScheme extends StandardScheme<ServiceException> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServiceException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXCEPTION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exceptionCode = iprot.readString();
              struct.setExceptionCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXCEPTION_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exceptionMsg = iprot.readString();
              struct.setExceptionMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServiceException struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.exceptionCode != null) {
        oprot.writeFieldBegin(EXCEPTION_CODE_FIELD_DESC);
        oprot.writeString(struct.exceptionCode);
        oprot.writeFieldEnd();
      }
      if (struct.exceptionMsg != null) {
        oprot.writeFieldBegin(EXCEPTION_MSG_FIELD_DESC);
        oprot.writeString(struct.exceptionMsg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServiceExceptionTupleSchemeFactory implements SchemeFactory {
    public ServiceExceptionTupleScheme getScheme() {
      return new ServiceExceptionTupleScheme();
    }
  }

  private static class ServiceExceptionTupleScheme extends TupleScheme<ServiceException> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServiceException struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.exceptionCode);
      oprot.writeString(struct.exceptionMsg);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServiceException struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.exceptionCode = iprot.readString();
      struct.setExceptionCodeIsSet(true);
      struct.exceptionMsg = iprot.readString();
      struct.setExceptionMsgIsSet(true);
    }
  }

}

